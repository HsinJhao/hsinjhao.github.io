<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用hexo和github搭建个人博客的辛酸之路</title>
      <link href="/2019/05/16/BuildBlogsBasedOnHexoAndGithub/"/>
      <url>/2019/05/16/BuildBlogsBasedOnHexoAndGithub/</url>
      
        <content type="html"><![CDATA[<p>由于个人强迫症，希望将自己值得记录下来的东西通过一种合理的方式进行记录。于是选择了搭建个人博客的方式来实现。通过<em>知乎</em>和<em>面向Google编程</em>后发现利用<code>hexo</code>和<code>github pages</code>来搭建个人博客的方式，最适合我这种穷学生折腾。</p><hr><h1 id="搭建博客基本框架"><a href="#搭建博客基本框架" class="headerlink" title="搭建博客基本框架"></a>搭建博客基本框架</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在搭建之间，需要先安装以下应用程序和注册相应账户以满足依赖项：</p><ul><li>安装Node.js</li><li>安装Git</li><li>安装Hexo</li><li>注册Github账号</li></ul><p>上述步骤最好依次进行，并可参考相应链接，避免踩坑。相应教程在下节给出。</p><p>值得说明的一点是，虽然此搭建博客的方案基本免费，但希望根据个人需求来进行选择。若除开博客功能外不再使用Github其他功能，专门注册账户来实现博客搭建而导致资源浪费，个人不太推崇。若自己想更安全更自由的搭建方式，个人建议注册相应域名。</p><h2 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h2><p>个人在搭建过程中参考了以下搭建教程，在此感谢前人铺路。并且发现官方技术支持文档基本上是新手最好的参考文档了，在此给出<a href="https://hexo-guide.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">中文参考链接</a>。</p><ul><li><a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">超详细Hexo+Github博客搭建小白教程</a>:按照此教程，基本能搭建好初步框架。并且其中还有部分骚操作，比如插入<em>网易云音乐</em>播放链接等。可主要依靠此教程完成大致搭建工作。</li><li><a href="https://zhuanlan.zhihu.com/p/28329874" target="_blank" rel="noopener">Hexo与Github搭建个人博客</a>:知乎这篇博文与上一个教程可相互补充，此博文为辅。</li></ul><hr><h1 id="自定义博客内容"><a href="#自定义博客内容" class="headerlink" title="自定义博客内容"></a>自定义博客内容</h1><h2 id="博客功能添加"><a href="#博客功能添加" class="headerlink" title="博客功能添加"></a>博客功能添加</h2><p>在搭建完博客的基本框架后，可以对以下内容进行自定义：</p><h3 id="绑定个人域名"><a href="#绑定个人域名" class="headerlink" title="绑定个人域名"></a>绑定个人域名</h3><h3 id="添加标签"><a href="#添加标签" class="headerlink" title="添加标签"></a>添加标签</h3><h3 id="添加分类"><a href="#添加分类" class="headerlink" title="添加分类"></a>添加分类</h3><h3 id="添加目录"><a href="#添加目录" class="headerlink" title="添加目录"></a>添加目录</h3><h3 id="添加文章阅读次数"><a href="#添加文章阅读次数" class="headerlink" title="添加文章阅读次数"></a>添加文章阅读次数</h3><p>基于LeanCloud进行设置，参考<a href="https://hexo-guide.readthedocs.io/zh_CN/latest/third-service/[LeanCloud]%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E6%AC%A1%E6%95%B0.html" target="_blank" rel="noopener">官方链接</a>。</p><h3 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h3><p>由于个人比较喜欢github的评论系统风格，又查阅相应参考链接，<code>gitalk</code>是可以避免被墙、速度较快的评论系统。故添加第三方服务<code>gitalk</code>来实现评论系统。其主要的配置过程可参考<a href="https://hexo-guide.readthedocs.io/zh_CN/latest/third-service/[Gitalk]%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F.html" target="_blank" rel="noopener">Next官方链接</a>。其中个人遭遇了<strong>未找到相关的 Issues 进行评论，请联系@XXXXX初始化创建</strong>的问题，通过官方issue找到了原因，是因为没有对评论系统进行初始化。当然可能还存在其他问题，在此给出<a href="https://github.com/mzlogin/mzlogin.github.io/issues/63" target="_blank" rel="noopener">官方issue链接</a>,如遇到相应问题，可首先查看此链接排除。</p><h3 id="添加搜索"><a href="#添加搜索" class="headerlink" title="添加搜索"></a>添加搜索</h3><h3 id="添加音乐外链播放器"><a href="#添加音乐外链播放器" class="headerlink" title="添加音乐外链播放器"></a>添加音乐外链播放器</h3><h3 id="添加字数统计和阅读时长功能"><a href="#添加字数统计和阅读时长功能" class="headerlink" title="添加字数统计和阅读时长功能"></a>添加字数统计和阅读时长功能</h3><p>Hexo的Next主题中默认是通过插件<code>hexo-symbols-count-time</code>实现的，通过git bash定位到博客根目录(如<code>E:\Blogs</code>)下后根据以下命令安装上述插件：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-<span class="built_in">time</span></span><br></pre></td></tr></table></figure><blockquote><p>注：有教程是安装<code>hexo-wordcount</code>来实现字数统计功能，但是需要修改太多东西，较为繁琐，故个人建议实验Next主题默认的<code>hexo-symbols-count-time</code>插件来实现上述功能。如需利用<code>hexo-wordcount</code>来实现，可参考<a href="https://eason-yang.com/2016/11/05/add-word-count-to-hexo-next/" target="_blank" rel="noopener">此链接</a>。</p></blockquote><p>然后需要修改主题配置文件和站点配置文件：</p><ul><li>修改站点配置文件<code>hexo _config.yml</code>：<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">symbols_count_time:</span></span><br><span class="line"><span class="function"><span class="title">symbols</span>: <span class="title">true</span> # 文章字数</span></span><br><span class="line"><span class="function"><span class="title">time</span>: <span class="title">true</span> # 阅读时长</span></span><br><span class="line"><span class="function"><span class="title">total_symbols</span>: <span class="title">true</span> # 所有文章总字数</span></span><br><span class="line"><span class="function"><span class="title">total_time</span>: <span class="title">true</span> # 所有文章阅读中时长</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>此文件为博客显示的基础配置，修改后需要重启服务才能更新博客内容。</p></blockquote><ul><li>修改主题配置文件<code>next _config.yml</code>:<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">symbols_count_time:</span></span><br><span class="line"><span class="function"><span class="title">separated_meta</span>: <span class="title">true</span>  # 是否换行显示 字数统计 及 阅读时长</span></span><br><span class="line"><span class="function"><span class="title">item_text_post</span>: <span class="title">true</span>  # 文章 字数统计 阅读时长 使用图标 还是 文本表示</span></span><br><span class="line"><span class="function"><span class="title">item_text_total</span>: <span class="title">false</span> # 博客底部统计 字数统计 阅读时长 使用图标 还是 文本表示</span></span><br><span class="line"><span class="function"><span class="title">awl</span>: 4</span></span><br><span class="line"><span class="function"><span class="title">wpm</span>: 275</span></span><br></pre></td></tr></table></figure></li></ul><p>具体字段含义可查看<a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">官方链接</a>.</p><h3 id="修改代码高亮样式"><a href="#修改代码高亮样式" class="headerlink" title="修改代码高亮样式"></a>修改代码高亮样式</h3><p>在Next主题下，修改代码高亮样式通过修改主题配置文件<code>themes/next/_config.yml</code>中找到以下代码段修改<code>highlight_theme</code>字段实现：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Code Highlight theme</span><br><span class="line"># Available values: normal | night | night eighties | night blue | night bright #格式样式，具体显示效果可查看以下链接</span><br><span class="line"># https://github.com/chriskempson/tomorrow-theme</span><br><span class="line"><span class="function">highlight_theme: <span class="title">normal</span> #可修改为<span class="title">night</span>模式</span></span><br></pre></td></tr></table></figure><p>相应的参考博客链接如下：</p><ul><li><p><a href="https://vslam.net/2018/03/04/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/" target="_blank" rel="noopener"><strong>Hexo使用攻略-添加分类标签和搜索功能</strong></a></p></li><li><p><a href="https://www.jianshu.com/p/e17711e44e00" target="_blank" rel="noopener"><strong>Hexo使用攻略-添加分类及标签</strong></a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方网站</a></p></li><li><p><a href="https://blog.csdn.net/wugenqiang/article/details/88609066" target="_blank" rel="noopener"><strong>Hexo的Next主题开启文章目录和调整样式</strong></a>:Next主题下和默认主题添加文章目录的方式不太一样。</p></li><li><p><a href="http://charmlegal.com/2017/12/05/article6/" target="_blank" rel="noopener">Hexo—如何设置文章目录(TOC)</a></p></li><li><p><a href="http://kuangqi.me/tricks/enable-table-of-contents-on-hexo/#%E4%BF%AE%E6%94%B9Landscape%E4%B8%BB%E9%A2%98%E7%9A%84ejs%E6%96%87%E4%BB%B6" target="_blank" rel="noopener">为Hexo博客默认主题添加目录</a></p></li><li><p><a href="https://shjhe.github.io/hexo/2018/07/04/Hexo%20Next%E4%B8%BB%E9%A2%98%E5%BC%80%E5%90%AF%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%8F%8A%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF/" target="_blank" rel="noopener"><strong>Hexo Next主题开启字数统计及阅读时长</strong></a></p></li><li><p><a href="https://zhaliezhi.com/posts/1e17d9f3.html" target="_blank" rel="noopener">Hexo + Next 折腾小记</a>：有关于字体、图片边框、社交链接居中显示、文章目录隐藏、代码高亮样式修改等。</p></li><li><p><a href="https://yashuning.github.io/2018/06/29/hexo-Next-%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E5%8A%9F%E8%83%BD/" target="_blank" rel="noopener">hexo - Next 主题添加评论功能</a>：使用Valine评论系统</p></li></ul><h2 id="博客写作注意事项"><a href="#博客写作注意事项" class="headerlink" title="博客写作注意事项"></a>博客写作注意事项</h2><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><p>在Hexo博客中插入图片有两种方式：</p><h4 id="本地引用"><a href="#本地引用" class="headerlink" title="本地引用"></a>本地引用</h4><ul><li><p>绝对路径:<br>当Hexo项目中只用到少量图片时，可以将图片统一放在<code>source/images</code>文件夹中，通过markdown语法访问它们。这种引用方式下引用的图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">image-name</span>](<span class="link">/images/image.jpg</span>)</span><br></pre></td></tr></table></figure></li><li><p>相对路径:<br>图片也可以采用相对路径，即在文章所属的文件夹中，从而使用相对路径来访问。文章的目录通过配置<code>_config.yml</code>来进行生成。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">post_asset_folder: <span class="title">true</span></span></span><br></pre></td></tr></table></figure></li></ul><p>将<code>_config.yml</code>文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post_name</span><br></pre></td></tr></table></figure><p> 在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在post_name中，文章就可以使用以下markdown语法来利用相对路径引用图片资源：<br> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">image-name</span>](<span class="link">image.jpg</span>)</span><br></pre></td></tr></table></figure></p><p>image.jpg的绝对路径为：<code>E:/Bolgs/source/_posts/post_name/image.jpg</code>,但与<code>post_name.md</code>是在同级目录文件中，故可使用上述相对路径进行插入。</p><p>上述引用方法存在一个缺陷：图片只能在文章中显示，但无法在首页中正常显示。<br>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。<br> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img image.jpg This is an image %&#125;</span><br></pre></td></tr></table></figure></p><p>不过目前个人觉得在文章中显示图片是最重要的，为方便起见，采用相对引用方式足矣。</p><h4 id="CDN引用"><a href="#CDN引用" class="headerlink" title="CDN引用"></a>CDN引用</h4><p>除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。比如<a href="https://cloudinary.com/" target="_blank" rel="noopener">Cloudinary</a>提供的图片CDN服务，在Cloudinary中上传图片后，会生成对应的url地址，将地址直接拿来引用即可。<br>这种方法博主尚未尝试过，后续有时间将会进行尝试并更新体验。</p><blockquote><p>参考链接: <a href="https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/" target="_blank" rel="noopener">Hexo博客写作之插入图片</a></p></blockquote><hr><h1 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h1><h2 id="npm安装出现low-severity-vulnerabilities"><a href="#npm安装出现low-severity-vulnerabilities" class="headerlink" title="npm安装出现low severity vulnerabilities"></a>npm安装出现low severity vulnerabilities</h2><p>由于部分包的版本问题，在安装某些插件时(比如hexo搜索功能插件)，在<code>Git bash</code>中会出现以下错误：</p><blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br><span class="line">+ hexo-generator-search@<span class="number">2</span>.<span class="number">4</span>.<span class="number">0</span></span><br><span class="line">updated <span class="number">1</span> package and audited <span class="number">12499</span> packages <span class="keyword">in</span> <span class="number">14</span>.<span class="number">805</span>s</span><br><span class="line">found <span class="number">5</span> low severity vulnerabilities</span><br><span class="line">  run `npm audit fix` to fix them, or `npm audit` <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure></blockquote><p><em>low severity vulnerabilities</em>直译过来便是<em>低严重漏洞</em>，可以尝试执行<code>npm  audit fix</code>进行修复，但我执行后还是有类似错误。所以查询<a href="https://docs.npmjs.com/auditing-package-dependencies-for-security-vulnerabilities" target="_blank" rel="noopener">官网资料</a>后发现需要手动更新相应的包，输入<code>npm audit</code>可知哪些包需要升级，其中示例如下：<br><img src="https://docs.npmjs.com/assets/images/packages-and-modules/audit-report-vulns-found-manual-review.png" alt="npm audit"><br>根据官网资料中这段话可知包的名称是什么：</p><blockquote><p>For example, if the path to the vulnerability is @package-name &gt; dependent-package &gt; package-with-vulnerability, you will need to update dependent-package.</p></blockquote><p><a href="https://www.npmjs.com.cn/getting-started/updating-global-packages/" target="_blank" rel="noopener">npm更新包</a>的方法为:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update -g &lt;pachage&gt;</span><br></pre></td></tr></table></figure><p>故此处只需要执行命令<code>npm update -g request</code>即可更新<code>request</code>包。若还有其他需要更新的包，重复上述操作即可。</p><hr><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这篇博文更像是自己搭建的记录和参考网站汇总。也是望后来者可以少踩坑。后续将会更新其他类型文章。</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda初体验(windows)</title>
      <link href="/2019/05/16/AnacondaFirstExperience/"/>
      <url>/2019/05/16/AnacondaFirstExperience/</url>
      
        <content type="html"><![CDATA[<p><img src="https://repo.continuum.io/assets/img/logo.png" alt="Anaconda"></p><hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于之前的算法编写、调试等过程均在自己的电脑上运行，所以出于以下原因一直对Anaconda嗤之以鼻：</p><ul><li>其存储空间有限，Anaconda会安装很多<code>使用率很低</code>的库；</li><li>本人有一种莫名的<code>折腾</code>的劲儿，喜欢精简而有效的原生python环境。</li></ul><p>但最近为课题组在<strong>Windows Server 2019</strong>搭建服务器深度学习开发环境时，在构建原生python环境中(其实就是安装<strong>tensorflow</strong>这个磨人的小妖精)屡屡受挫，<br>不再想理什么<code>DLL Load fail</code>、<code>ImportError</code>；并且服务器非我一人使用，有人习惯Anaconda，故尝试直接将Anaconda的python环境<br>作为系统默认Python开发环境。以下是个人的折腾记录。</p><hr><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装推荐官网下载对应平台的程序安装包，此处贴出<a href="https://www.anaconda.com/distribution/" target="_blank" rel="noopener">Anaconda官网地址</a>。若要下载历史版本，可见<a href="https://repo.continuum.io/archive/" target="_blank" rel="noopener">链接</a>。</p><p>需要注意的是，每一版的Anaconda都与某一版本的Python版本有所关联，如果不想后期更改<code>base(root)</code>环境或新建其他python版本环境的话，最好选择某一版本的Anaconda<br>进行安装。二者版本对应情况可见<a href="https://blog.csdn.net/yuejisuo1948/article/details/81043823" target="_blank" rel="noopener">链接</a>。在安装过程中，注意以下几个设置：</p><ul><li>安装路径</li><li>是否添加Anacona至环境变量</li><li>是否设置Anaconda所安装的python为默认python环境</li></ul><p>其中安装路径根据实际情况进行设置。笔者一般软件安装路径为非系统盘，如<code>D:\Anaconda3</code>(后续Anaconda的安装路径将写作此路径).若你本机上已安装了python，后两者均不建议进行设置，因为其会改变<br>系统变量中的python环境变量。如有需要，后续可进行更改。如：</p><ul><li><p>添加Anacona至环境变量：添加以下地址至环境变量</p> <figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">Anaconda3</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Anaconda3</span>\<span class="title">Library</span></span></span><br><span class="line"><span class="function"><span class="title">D</span>:\<span class="title">Anaconda3</span>\<span class="title">Scripts</span></span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="直接更改base-root-环境下的python版本"><a href="#直接更改base-root-环境下的python版本" class="headerlink" title="直接更改base(root)环境下的python版本"></a>直接更改base(root)环境下的python版本</h1><p>此需求大多是为安装tensorflow-gpu而衍生出，因为其对python版本、CUDA等要求甚严。假设需要将默认的python版本(3.7.3)更改为3.6.8，<br>可参考以下两种方式(<a href="https://blog.csdn.net/isyiming/article/details/79225608" target="_blank" rel="noopener">参考链接</a>)：</p><h2 id="Anaconda-Navigator中进行更改"><a href="#Anaconda-Navigator中进行更改" class="headerlink" title="Anaconda Navigator中进行更改"></a>Anaconda Navigator中进行更改</h2><p>打开Anaconda Navigator，找到Environment中base(root)下已安装的python,右键图标进行更改，如下图：</p><ul><li>点击<code>base</code>切换到python环境</li><li>搜索已安装的<code>python</code>库</li><li>右键点击<code>python</code>可出现<code>Mark for specific version installation</code>选项</li><li>点击想切换的<code>python</code>版本代号</li><li>点击页面下方<code>apply</code>按钮即可执行修改(图中未显示)<br><img src="Anaconda%E4%BF%AE%E6%94%B9python%E7%89%88%E6%9C%AC.png" alt="Anaconda修改python版本"></li></ul><h2 id="Anaconda-Prompt中进行更改"><a href="#Anaconda-Prompt中进行更改" class="headerlink" title="Anaconda Prompt中进行更改"></a>Anaconda Prompt中进行更改</h2><p>直接打开终端或者Anaconda Prompt,输入以下命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install python=<span class="number">3</span>.<span class="number">6</span>.<span class="number">8</span></span><br></pre></td></tr></table></figure><p>若不对默认的base(root)环境进行修改，也可以直接新建相应python版本的环境，以满足需求。在此不做赘述。</p><hr><h1 id="Anaconda-Channels-无法更改后的折衷方案"><a href="#Anaconda-Channels-无法更改后的折衷方案" class="headerlink" title="Anaconda Channels 无法更改后的折衷方案"></a>Anaconda Channels 无法更改后的折衷方案</h1><p>众所周知，由于<code>GFW</code>的原因，国外诸多网站在国内无法正常访问。于是催生出了一系列国内源镜像，为大家提供方便。原本Anaconda在国内也是有镜像源地址的，但是最近由于版权或商标问题，国内诸多镜像地址，如<a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华大学镜像</a>、<a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">中科大镜像</a>、<a href="http://mirrors.nju.edu.cn/" target="_blank" rel="noopener">南京大学镜像</a>等镜像网站均关闭了对conda源的支持,直接将其链接至官方镜像地址。以下是相关情况的说明和更新：</p><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/news/close-anaconda-service/" target="_blank" rel="noopener">2019-04-16:清华大学关于停止Anaconda镜像服务的通知</a></li><li><a href="https://servers.ustclug.org/2019/04/close-anaconda-service/" target="_blank" rel="noopener">2019-04-25:中科大Anaconda 镜像停止服务</a></li><li><a href="https://zhuanlan.zhihu.com/p/62899936" target="_blank" rel="noopener">知乎:Anaconda 清华源关闭后，怎么办？</a></li></ul><p>所以目前修改Anaconda Channels基本无效，除非是自己搭梯子。否则就自己用官方源慢慢安装和更新吧(<strong>亲测要等很久才能安装上一个库</strong>)。若针对已成功安装Anaconda的用户来说，可以激活Anaconda环境后，用pip命令对第三方库进行安装或者更新。这是一个折衷的方法了。因为pip在国内的镜像地址是可以用的，其中清华的镜像是比较快的。关于修改pip源镜像的地址，可以参考<a href="https://foofish.net/pip.html" target="_blank" rel="noopener">此链接</a>。</p><hr><h1 id="Anaconda安装深度学习框架"><a href="#Anaconda安装深度学习框架" class="headerlink" title="Anaconda安装深度学习框架"></a>Anaconda安装深度学习框架</h1><p>无论是tensorflow还是PyTorch，在GPU的环境下更能发挥其加速作用。安装cpu版本的深度学习框架配置起来较为简单顺畅，在此不做赘述，可自行百度。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>由于利用Anaconda搭建基于Tensorflow或Pytorch的深度学习框架不需要自己安装其他的依赖性，所以个人推荐此方法。若想自己根据原生python搭建上述框架，便需要自行进行以下操作：</p><ul><li>确认自己具有Nvidia的显卡，安装最新<a href="https://www.nvidia.com/Download/index.aspx?lang=cn" target="_blank" rel="noopener">Nvidia显卡驱动</a></li><li>安装<a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">CUDA</a></li><li>安装<a href="https://developer.nvidia.com/rdp/cudnn-download" target="_blank" rel="noopener">cudnn</a></li></ul><p>需要注意的是，cudnn需要注册Nvidia开发者账户才可以进行下载。其中与tensorflow或pytorch的版本需要一一对应，tensorflow所支持的cuda对应版本可查看<a href="https://www.tensorflow.org/install/source_windows" target="_blank" rel="noopener">此链接</a>寻找适合的版本或参考以下图片：</p><p><img src="tensorflow-cpu-dependency.png" alt="tensorflow-cpu-win-dependency"><br><img src="tensorflow-gpu-dependency-win.png" alt="tensorflow-gpu-win-dependency"></p><h2 id="Anaconda安装Tensorflow"><a href="#Anaconda安装Tensorflow" class="headerlink" title="Anaconda安装Tensorflow"></a>Anaconda安装Tensorflow</h2><p>在Anaconda中安装Tensorflow的过程还是较为简单的，只需要搜索到相应的Tensorflow库，然后选择对应的版本安装即可。因为其会根据所选择的tensorflow版本安装对应的<strong>cuda</strong>和<strong>cudnn</strong>以支持GPU加速。</p><h2 id="Anaconda安装Pytorch"><a href="#Anaconda安装Pytorch" class="headerlink" title="Anaconda安装Pytorch"></a>Anaconda安装Pytorch</h2><p>Pytorch的安装更加人性化，不需要进行各种配置，版本之间的依赖也较少。可以直接选择与cuda相对应版本的pytorch进行安装，如下图：<br><img src="pytorch-setup.png" alt="Pytorch安装"></p><h2 id="安装测试"><a href="#安装测试" class="headerlink" title="安装测试"></a>安装测试</h2><p>安装上述环境后均需要进行测试，查看是否能够正常使用。<br>打开cmd并启动python开发环境后，可输入以下测试代码进行测试：</p><ul><li><blockquote><p>Tensorflow-gpu测试代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">matrix1 = tf.constant([[<span class="number">3.</span>, <span class="number">3.</span>]])     </span><br><span class="line">matrix2 = tf.constant([[<span class="number">2.</span>],[<span class="number">2.</span>]])    </span><br><span class="line">product = tf.matmul(matrix1, matrix2) </span><br><span class="line">sess = tf.Session()</span><br><span class="line">print(sess.run(product))</span><br></pre></td></tr></table></figure></li></ul><p>若输出的信息中有显卡信息，并且没有报错，成功输出结果，则安装成功，可正常使用tensorflow-gpu。</p><ul><li><blockquote><p>Pytorch-gpu测试代码</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">torch.cuda.is_available()</span><br></pre></td></tr></table></figure></li></ul><p>输出<code>true</code>，则说明GPU驱动和CUDA可以支持Pytorch的加速计算。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>上述是简单的Anaconda安装和深度学习框架搭建基本流程。如需了解细节可阅读相应参考链接。</p>]]></content>
      
      
      <categories>
          
          <category> 软件使用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anaconda </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
